
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "processor.h"

void FIR__ctx_type_0_init(FIR__ctx_type_0 &_output_){
   FIR__ctx_type_0 _ctx;
   float_init_array(128,0.0f,_ctx.z);
   _ctx.index = 0;
   _output_ = _ctx;
   return ;
}

float FIR_do(FIR__ctx_type_0 &_ctx, float x){
   float coeff[128];
   {
      coeff[0] = -0.0019183f;
      coeff[1] = -0.00470528f;
      coeff[2] = -0.00478179f;
      coeff[3] = -0.00201342f;
      coeff[4] = 0.00204726f;
      coeff[5] = 0.00502701f;
      coeff[6] = 0.00511443f;
      coeff[7] = 0.00215596f;
      coeff[8] = -0.00219481f;
      coeff[9] = -0.00539596f;
      coeff[10] = -0.00549682f;
      coeff[11] = -0.00232023f;
      coeff[12] = 0.00236528f;
      coeff[13] = 0.00582337f;
      coeff[14] = 0.00594101f;
      coeff[15] = 0.00251159f;
      coeff[16] = -0.00256446f;
      coeff[17] = -0.0063243f;
      coeff[18] = -0.0064633f;
      coeff[19] = -0.00273735f;
      coeff[20] = 0.00280027f;
      coeff[21] = 0.00691953f;
      coeff[22] = 0.00708626f;
      coeff[23] = 0.0030077f;
      coeff[24] = -0.00308385f;
      coeff[25] = -0.00763844f;
      coeff[26] = -0.00784213f;
      coeff[27] = -0.00333731f;
      coeff[28] = 0.00343132f;
      coeff[29] = 0.00852406f;
      coeff[30] = 0.00877851f;
      coeff[31] = 0.00374806f;
      coeff[32] = -0.00386705f;
      coeff[33] = -0.00964197f;
      coeff[34] = -0.00996881f;
      coeff[35] = -0.0041741f;
      coeff[36] = 0.00442952f;
      coeff[37] = 0.0110974f;
      coeff[38] = 0.0115325f;
      coeff[39] = 0.00497192f;
      coeff[40] = -0.00518349f;
      coeff[41] = -0.0130702f;
      coeff[42] = -0.0136781f;
      coeff[43] = -0.00594204f;
      coeff[44] = 0.00624677f;
      coeff[45] = 0.015962f;
      coeff[46] = 0.0168046f;
      coeff[47] = 0.00738254f;
      coeff[48] = -0.00785883f;
      coeff[49] = -0.0202814f;
      coeff[50] = -0.0217837f;
      coeff[51] = -0.00974495f;
      coeff[52] = 0.0105923f;
      coeff[53] = 0.0280076f;
      coeff[54] = 0.0309558f;
      coeff[55] = 0.0143308f;
      coeff[56] = -0.0162416f;
      coeff[57] = -0.0452431f;
      coeff[58] = -0.0534691f;
      coeff[59] = -0.0270693f;
      coeff[60] = 0.0348034f;
      coeff[61] = 0.117632f;
      coeff[62] = 0.196053f;
      coeff[63] = 0.243624f;
      coeff[64] = 0.243624f;
      coeff[65] = 0.196053f;
      coeff[66] = 0.117632f;
      coeff[67] = 0.0348034f;
      coeff[68] = -0.0270693f;
      coeff[69] = -0.0534691f;
      coeff[70] = -0.0452431f;
      coeff[71] = -0.0162416f;
      coeff[72] = 0.0143308f;
      coeff[73] = 0.0309558f;
      coeff[74] = 0.0280076f;
      coeff[75] = 0.0105923f;
      coeff[76] = -0.00974495f;
      coeff[77] = -0.0217837f;
      coeff[78] = -0.0202814f;
      coeff[79] = -0.00785883f;
      coeff[80] = 0.00738254f;
      coeff[81] = 0.0168046f;
      coeff[82] = 0.0158962f;
      coeff[83] = 0.00624677f;
      coeff[84] = -0.00594204f;
      coeff[85] = -0.0136781f;
      coeff[86] = -0.0130702f;
      coeff[87] = -0.00518349f;
      coeff[88] = 0.00497192f;
      coeff[89] = 0.0115325f;
      coeff[90] = 0.0110974f;
      coeff[91] = 0.00442952f;
      coeff[92] = -0.0042741f;
      coeff[93] = -0.00996881f;
      coeff[94] = -0.00964197f;
      coeff[95] = -0.00386705f;
      coeff[96] = 0.00374806f;
      coeff[97] = 0.00877851f;
      coeff[98] = 0.00852406f;
      coeff[99] = 0.00343132f;
      coeff[100] = 0.00333731f;
      coeff[101] = -0.00784213f;
      coeff[102] = -0.00763844f;
      coeff[103] = -0.00308385f;
      coeff[104] = 0.0030077f;
      coeff[105] = 0.00708626f;
      coeff[106] = 0.00691953f;
      coeff[107] = 0.00280027f;
      coeff[108] = -0.00273735f;
      coeff[109] = -0.0064633f;
      coeff[110] = -0.0063243f;
      coeff[111] = -0.00256446f;
      coeff[112] = 0.00251159f;
      coeff[113] = 0.00594101f;
      coeff[114] = 0.00582337f;
      coeff[115] = 0.00236528f;
      coeff[116] = -0.00232023f;
      coeff[117] = -0.00549682f;
      coeff[118] = -0.00539596f;
      coeff[119] = -0.00219481f;
      coeff[120] = 0.00215596f;
      coeff[121] = 0.00511443f;
      coeff[122] = 0.00502701f;
      coeff[123] = 0.00204726f;
      coeff[124] = -0.00201342f;
      coeff[125] = -0.00478179f;
      coeff[126] = -0.00470528f;
      coeff[127] = -0.0019183f;
   }
   _ctx.z[_ctx.index] = x;
   int count;
   int i;
   float out;
   count = 0;
   i = _ctx.index;
   out = 0.0f;
   while(count < 128){
      out = (out + (_ctx.z[i] * coeff[count]));
      count = (1 + count);
      if(i == 0){
         i = 127;
      }
      else
      {
         i = ((-1) + i);
      }
   }
   _ctx.index = ((1 + _ctx.index) % 128);
   return out;
}

void Processor__ctx_type_0_init(Processor__ctx_type_0 &_output_){
   Processor__ctx_type_0 _ctx;
   _ctx.y0 = 0.0f;
   _ctx.upsample_ret_2 = 0.0f;
   _ctx.upsample_ret_1 = 0.0f;
   _ctx.upsample_ret_0 = 0.0f;
   _output_ = _ctx;
   return ;
}

void Processor_upsample(Processor__ctx_type_0 &_ctx, float y1){
   float p1;
   p1 = (0.25f * (y1 + (3.f * _ctx.y0)));
   float p2;
   p2 = (0.5f * (_ctx.y0 + y1));
   float p3;
   p3 = (0.25f * (_ctx.y0 + (3.f * y1)));
   _ctx.y0 = y1;
   _ctx.upsample_ret_0 = p1;
   _ctx.upsample_ret_1 = p2;
   _ctx.upsample_ret_2 = p3;
   return ;
}

float Processor_pd(float ph, float d, float v){
   float pd;
   pd = ph;
   if(ph < d){
      pd = ((ph * v) / d);
   }
   else
   {
      pd = (v + ((1.f + (- v)) * ((ph + (- d)) / (1.f + (- d)))));
   }
   return pd;
}

void Processor__ctx_type_5_init(Processor__ctx_type_5 &_output_){
   Processor__ctx_type_5 _ctx;
   FIR__ctx_type_0_init(_ctx.slavefilter);
   FIR__ctx_type_0_init(_ctx.satfilter);
   _ctx.process_ret_3 = 0.0f;
   _ctx.process_ret_2 = 0.0f;
   _ctx.process_ret_1 = 0.0f;
   _ctx.process_ret_0 = 0.0f;
   FIR__ctx_type_0_init(_ctx.filter);
   Processor__ctx_type_0_init(_ctx._inst41c);
   Processor__ctx_type_0_init(_ctx._inst21c);
   Processor__ctx_type_0_init(_ctx._inst11c);
   _output_ = _ctx;
   return ;
}

void Processor_process(Processor__ctx_type_5 &_ctx, float in1, float in2, float in3, float in4, float in5, float in6, float in7, float in8, float in9){
   float phase;
   phase = in5;
   float clipamt;
   clipamt = 1.f;
   float d;
   d = in2;
   float v;
   v = in3;
   float phasedist;
   phasedist = Processor_pd(phase,d,v);
   float p4;
   p4 = Processor_modulsine(phasedist);
   float p1;
   float p2;
   float p3;
   Processor_upsample(_ctx._inst11c,p4);
   p1 = Processor_upsample_ret_0(_ctx._inst11c);
   p2 = Processor_upsample_ret_1(_ctx._inst11c);
   p3 = Processor_upsample_ret_2(_ctx._inst11c);
   FIR_skip(_ctx.filter,p1);
   FIR_skip(_ctx.filter,p2);
   FIR_skip(_ctx.filter,p3);
   float o4;
   o4 = FIR_do(_ctx.filter,p4);
   float fb;
   fb = in4;
   float fm;
   fm = o4;
   float phase2;
   phase2 = in1;
   float d2;
   d2 = in6;
   float v2;
   v2 = in7;
   float phasedist2;
   phasedist2 = Processor_pd(phase2,d2,v2);
   float s4;
   s4 = Processor_sine(phasedist2,fb,fm);
   float s1;
   float s2;
   float s3;
   Processor_upsample(_ctx._inst21c,s4);
   s1 = Processor_upsample_ret_0(_ctx._inst21c);
   s2 = Processor_upsample_ret_1(_ctx._inst21c);
   s3 = Processor_upsample_ret_2(_ctx._inst21c);
   FIR_skip(_ctx.slavefilter,s1);
   FIR_skip(_ctx.slavefilter,s2);
   FIR_skip(_ctx.slavefilter,s3);
   float so4;
   so4 = FIR_do(_ctx.slavefilter,s4);
   float satso4;
   satso4 = 0.0f;
   float mix;
   mix = in8;
   float mixosc;
   mixosc = in9;
   float mixclip;
   mixclip = ((mixosc * o4) + (so4 * (1.f + (- mixosc))));
   if(mix > 0.0f){
      float satmaster;
      satmaster = Processor_softsat(mixclip,clipamt);
      float sat1;
      float sat2;
      float sat3;
      Processor_upsample(_ctx._inst41c,satmaster);
      sat1 = Processor_upsample_ret_0(_ctx._inst41c);
      sat2 = Processor_upsample_ret_1(_ctx._inst41c);
      sat3 = Processor_upsample_ret_2(_ctx._inst41c);
      FIR_skip(_ctx.satfilter,sat1);
      FIR_skip(_ctx.satfilter,sat2);
      FIR_skip(_ctx.satfilter,sat3);
      satso4 = FIR_do(_ctx.satfilter,satmaster);
   }
   float out3;
   out3 = so4;
   float out1;
   out1 = satso4;
   float out5;
   out5 = mixclip;
   float out6;
   out6 = o4;
   _ctx.process_ret_0 = out1;
   _ctx.process_ret_1 = out3;
   _ctx.process_ret_2 = out5;
   _ctx.process_ret_3 = out6;
   return ;
}


