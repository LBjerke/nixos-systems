
#include "AddrSeqX.hpp"

void AddrSeqX::processAlways(const ProcessArgs& args) {
	int position = 0;
	int baseID = 0;
	if (baseConnected()) {
		AddrSeqExpanderMessage* bm = fromBase();
		baseID = bm->baseID;
		position = bm->position;
		_rangeOffset = bm->rangeOffset;
		_rangeScale = bm->rangeScale;
	}
	setBaseIDAndPosition(baseID, position);
	if (_position < 1) {
		for (int i = 0; i < 4; ++i) {
			_localElements[i]->light.value = 0.0f;
		}
	}

	if (expanderConnected()) {
		AddrSeqExpanderMessage* te = toExpander();
		te->baseID = _baseID;
		te->position = _position > 0 ? _position + 1 : 0;
		te->rangeOffset = _rangeOffset;
		te->rangeScale = _rangeScale;
	}
}

struct AddrSeqXWidget : BGModuleWidget {
	static constexpr int hp = 3;

	AddrSeqXWidget(AddrSeqX* module) {
		setModule(module);
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);
		setPanel(box.size, "AddrSeqX");
		createScrews();

		// generated by svg_widgets.rb
		auto out1ParamPosition = Vec(14.5, 36.0);
		auto out2ParamPosition = Vec(14.5, 77.3);
		auto out3ParamPosition = Vec(14.5, 118.6);
		auto out4ParamPosition = Vec(14.5, 159.9);
		auto out5ParamPosition = Vec(14.5, 201.1);
		auto out6ParamPosition = Vec(14.5, 242.4);
		auto out7ParamPosition = Vec(14.5, 283.7);
		auto out8ParamPosition = Vec(14.5, 325.0);

		auto out1LightPosition = Vec(22.5, 58.5);
		auto out2LightPosition = Vec(22.5, 99.8);
		auto out3LightPosition = Vec(22.5, 141.1);
		auto out4LightPosition = Vec(22.5, 182.4);
		auto out5LightPosition = Vec(22.5, 223.6);
		auto out6LightPosition = Vec(22.5, 264.9);
		auto out7LightPosition = Vec(22.5, 306.2);
		auto out8LightPosition = Vec(22.5, 347.5);
		// end generated by svg_widgets.rb

		addParam(createParam<Knob16>(out1ParamPosition, module, AddrSeqX::OUT1_PARAM));
		addParam(createParam<Knob16>(out2ParamPosition, module, AddrSeqX::OUT2_PARAM));
		addParam(createParam<Knob16>(out3ParamPosition, module, AddrSeqX::OUT3_PARAM));
		addParam(createParam<Knob16>(out4ParamPosition, module, AddrSeqX::OUT4_PARAM));
		addParam(createParam<Knob16>(out5ParamPosition, module, AddrSeqX::OUT5_PARAM));
		addParam(createParam<Knob16>(out6ParamPosition, module, AddrSeqX::OUT6_PARAM));
		addParam(createParam<Knob16>(out7ParamPosition, module, AddrSeqX::OUT7_PARAM));
		addParam(createParam<Knob16>(out8ParamPosition, module, AddrSeqX::OUT8_PARAM));

		addChild(createLight<BGSmallLight<GreenLight>>(out1LightPosition, module, AddrSeqX::OUT1_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out2LightPosition, module, AddrSeqX::OUT2_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out3LightPosition, module, AddrSeqX::OUT3_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out4LightPosition, module, AddrSeqX::OUT4_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out5LightPosition, module, AddrSeqX::OUT5_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out6LightPosition, module, AddrSeqX::OUT6_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out7LightPosition, module, AddrSeqX::OUT7_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(out8LightPosition, module, AddrSeqX::OUT8_LIGHT));
	}
};

Model* modelAddrSeqX = createModel<AddrSeqX, AddrSeqXWidget>("Bogaudio-AddrSeqX", "ASX", "8-step chainable expander for ADDR-SEQ", "Sequencer", "Expander", "Polyphonic");
