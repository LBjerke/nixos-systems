
#include "PEQ.hpp"

void PEQ::sampleRateChange() {
	float sr = APP->engine->getSampleRate();
	for (int c = 0; c < _channels; ++c) {
		_engines[c]->setSampleRate(sr);
	}
}

bool PEQ::active() {
	return outputs[OUT_OUTPUT].isConnected();
}

int PEQ::channels() {
	return inputs[IN_INPUT].getChannels();
}

void PEQ::addChannel(int c) {
	const int n = 3;
	_engines[c] = new PEQEngine(n);
	for (int i = 0; i < n; ++i) {
		_engines[c]->configChannel(
			i,
			c,
			params[A_LEVEL_PARAM + i*4],
			params[A_FREQUENCY_PARAM + i*4],
			params[A_CV_PARAM + i*4],
			NULL,
			params[A_BANDWIDTH_PARAM + i*4],
			inputs[A_LEVEL_INPUT + i],
			inputs[A_FREQUENCY_INPUT + i],
			inputs[ALL_CV_INPUT],
			&inputs[A_BANDWIDTH_INPUT + i]
		);
	}
	_engines[c]->setSampleRate(APP->engine->getSampleRate());
}

void PEQ::removeChannel(int c) {
	delete _engines[c];
	_engines[c] = NULL;
}

void PEQ::modulate() {
	auto lowMode = params[A_MODE_PARAM].getValue() > 0.5f ? MultimodeFilter::LOWPASS_MODE : MultimodeFilter::BANDPASS_MODE;
	auto highMode = params[C_MODE_PARAM].getValue() > 0.5f ? MultimodeFilter::HIGHPASS_MODE : MultimodeFilter::BANDPASS_MODE;
	for (int c = 0; c < _channels; ++c) {
		PEQEngine& e = *_engines[c];
		e.setLowFilterMode(lowMode);
		e.setHighFilterMode(highMode);
		e.modulate();
	}
}

void PEQ::processAlways(const ProcessArgs& args) {
	outputs[OUT_OUTPUT].setChannels(_channels);
	std::fill(_rmsSums, _rmsSums + 3, 0.0f);
}

void PEQ::processChannel(const ProcessArgs& args, int c) {
	outputs[OUT_OUTPUT].setVoltage(_engines[c]->next(inputs[IN_INPUT].getVoltage(c), _rmsSums), c);
}

void PEQ::postProcessAlways(const ProcessArgs& args) {
	lights[A_LIGHT].value = _rmsSums[0] * _inverseChannels;
	lights[B_LIGHT].value = _rmsSums[1] * _inverseChannels;
	lights[C_LIGHT].value = _rmsSums[2] * _inverseChannels;
}

struct PEQWidget : BGModuleWidget {
	static constexpr int hp = 10;

	PEQWidget(PEQ* module) {
		setModule(module);
		box.size = Vec(RACK_GRID_WIDTH * hp, RACK_GRID_HEIGHT);
		setPanel(box.size, "PEQ");
		createScrews();

		// generated by svg_widgets.rb
		auto aLevelParamPosition = Vec(21.0, 36.5);
		auto aFrequencyParamPosition = Vec(67.0, 36.5);
		auto aBandwidthParamPosition = Vec(122.0, 29.0);
		auto aCvParamPosition = Vec(122.0, 67.0);
		auto aModeParamPosition = Vec(131.5, 50.5);
		auto bLevelParamPosition = Vec(21.0, 104.5);
		auto bFrequencyParamPosition = Vec(67.0, 104.5);
		auto bBandwidthParamPosition = Vec(122.0, 100.0);
		auto bCvParamPosition = Vec(122.0, 133.0);
		auto cLevelParamPosition = Vec(21.0, 170.5);
		auto cFrequencyParamPosition = Vec(67.0, 170.5);
		auto cBandwidthParamPosition = Vec(122.0, 163.0);
		auto cCvParamPosition = Vec(122.0, 201.0);
		auto cModeParamPosition = Vec(131.5, 184.5);

		auto aLevelInputPosition = Vec(15.0, 231.0);
		auto bLevelInputPosition = Vec(47.0, 231.0);
		auto cLevelInputPosition = Vec(79.0, 231.0);
		auto allCvInputPosition = Vec(111.0, 231.0);
		auto aFrequencyInputPosition = Vec(15.0, 275.0);
		auto bFrequencyInputPosition = Vec(47.0, 275.0);
		auto cFrequencyInputPosition = Vec(79.0, 275.0);
		auto inInputPosition = Vec(111.0, 275.0);
		auto aBandwidthInputPosition = Vec(15.0, 319.0);
		auto bBandwidthInputPosition = Vec(47.0, 319.0);
		auto cBandwidthInputPosition = Vec(79.0, 319.0);

		auto outOutputPosition = Vec(111.0, 319.0);

		auto aLightPosition = Vec(5.5, 43.0);
		auto bLightPosition = Vec(5.5, 111.0);
		auto cLightPosition = Vec(5.5, 177.0);
		// end generated by svg_widgets.rb

		addParam(createParam<Knob29>(aLevelParamPosition, module, PEQ::A_LEVEL_PARAM));
		addParam(createParam<Knob29>(aFrequencyParamPosition, module, PEQ::A_FREQUENCY_PARAM));
		addParam(createParam<Knob16>(aBandwidthParamPosition, module, PEQ::A_BANDWIDTH_PARAM));
		addParam(createParam<Knob16>(aCvParamPosition, module, PEQ::A_CV_PARAM));
		addParam(createParam<IndicatorButtonGreen9>(aModeParamPosition, module, PEQ::A_MODE_PARAM));
		addParam(createParam<Knob29>(bLevelParamPosition, module, PEQ::B_LEVEL_PARAM));
		addParam(createParam<Knob29>(bFrequencyParamPosition, module, PEQ::B_FREQUENCY_PARAM));
		addParam(createParam<Knob16>(bBandwidthParamPosition, module, PEQ::B_BANDWIDTH_PARAM));
		addParam(createParam<Knob16>(bCvParamPosition, module, PEQ::B_CV_PARAM));
		addParam(createParam<Knob29>(cLevelParamPosition, module, PEQ::C_LEVEL_PARAM));
		addParam(createParam<Knob29>(cFrequencyParamPosition, module, PEQ::C_FREQUENCY_PARAM));
		addParam(createParam<Knob16>(cBandwidthParamPosition, module, PEQ::C_BANDWIDTH_PARAM));
		addParam(createParam<Knob16>(cCvParamPosition, module, PEQ::C_CV_PARAM));
		addParam(createParam<IndicatorButtonGreen9>(cModeParamPosition, module, PEQ::C_MODE_PARAM));

		addInput(createInput<Port24>(aLevelInputPosition, module, PEQ::A_LEVEL_INPUT));
		addInput(createInput<Port24>(bLevelInputPosition, module, PEQ::B_LEVEL_INPUT));
		addInput(createInput<Port24>(cLevelInputPosition, module, PEQ::C_LEVEL_INPUT));
		addInput(createInput<Port24>(allCvInputPosition, module, PEQ::ALL_CV_INPUT));
		addInput(createInput<Port24>(aFrequencyInputPosition, module, PEQ::A_FREQUENCY_INPUT));
		addInput(createInput<Port24>(bFrequencyInputPosition, module, PEQ::B_FREQUENCY_INPUT));
		addInput(createInput<Port24>(cFrequencyInputPosition, module, PEQ::C_FREQUENCY_INPUT));
		addInput(createInput<Port24>(inInputPosition, module, PEQ::IN_INPUT));
		addInput(createInput<Port24>(aBandwidthInputPosition, module, PEQ::A_BANDWIDTH_INPUT));
		addInput(createInput<Port24>(bBandwidthInputPosition, module, PEQ::B_BANDWIDTH_INPUT));
		addInput(createInput<Port24>(cBandwidthInputPosition, module, PEQ::C_BANDWIDTH_INPUT));

		addOutput(createOutput<Port24>(outOutputPosition, module, PEQ::OUT_OUTPUT));

		addChild(createLight<BGSmallLight<GreenLight>>(aLightPosition, module, PEQ::A_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(bLightPosition, module, PEQ::B_LIGHT));
		addChild(createLight<BGSmallLight<GreenLight>>(cLightPosition, module, PEQ::C_LIGHT));
	}
};

Model* modelPEQ = createModel<PEQ, PEQWidget>("Bogaudio-PEQ", "PEQ", "3-channel parametric equalizer", "Filter", "Polyphonic");
